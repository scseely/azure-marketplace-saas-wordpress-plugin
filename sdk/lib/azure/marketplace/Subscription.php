<?php
/**
 * Subscription
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SaaS fulfillment APIs, version 2
 *
 * This spec details the APIs that enable partners to sell their SaaS applications in the AppSource marketplace and the Azure Marketplace. These APIs are a requirement for transactable SaaS offers on the AppSource and Azure Marketplace.
 *
 * OpenAPI spec version: 2018-08-31
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20-SNAPSHOT
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\azure.marketplace;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Subscription Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Subscription implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Subscription';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'publisher_id' => 'string',
'offer_id' => 'string',
'name' => 'string',
'saas_subscription_status' => 'string',
'beneficiary' => '\Swagger\Client\azure.marketplace\AadIdentifier',
'purchaser' => '\Swagger\Client\azure.marketplace\AadIdentifier',
'plan_id' => 'string',
'quantity' => 'int',
'term' => '\Swagger\Client\azure.marketplace\SubscriptionTerm',
'is_test' => 'bool',
'is_free_trial' => 'bool',
'allowed_customer_operations' => 'string[]',
'session_id' => 'string',
'fulfillment_id' => 'string',
'store_front' => 'string',
'session_mode' => 'string',
'sandbox_type' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
'publisher_id' => null,
'offer_id' => null,
'name' => null,
'saas_subscription_status' => null,
'beneficiary' => null,
'purchaser' => null,
'plan_id' => null,
'quantity' => 'int32',
'term' => null,
'is_test' => null,
'is_free_trial' => null,
'allowed_customer_operations' => null,
'session_id' => 'uuid',
'fulfillment_id' => 'uuid',
'store_front' => null,
'session_mode' => null,
'sandbox_type' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'publisher_id' => 'publisherId',
'offer_id' => 'offerId',
'name' => 'name',
'saas_subscription_status' => 'saasSubscriptionStatus',
'beneficiary' => 'beneficiary',
'purchaser' => 'purchaser',
'plan_id' => 'planId',
'quantity' => 'quantity',
'term' => 'term',
'is_test' => 'isTest',
'is_free_trial' => 'isFreeTrial',
'allowed_customer_operations' => 'allowedCustomerOperations',
'session_id' => 'sessionId',
'fulfillment_id' => 'fulfillmentId',
'store_front' => 'storeFront',
'session_mode' => 'sessionMode',
'sandbox_type' => 'sandboxType'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'publisher_id' => 'setPublisherId',
'offer_id' => 'setOfferId',
'name' => 'setName',
'saas_subscription_status' => 'setSaasSubscriptionStatus',
'beneficiary' => 'setBeneficiary',
'purchaser' => 'setPurchaser',
'plan_id' => 'setPlanId',
'quantity' => 'setQuantity',
'term' => 'setTerm',
'is_test' => 'setIsTest',
'is_free_trial' => 'setIsFreeTrial',
'allowed_customer_operations' => 'setAllowedCustomerOperations',
'session_id' => 'setSessionId',
'fulfillment_id' => 'setFulfillmentId',
'store_front' => 'setStoreFront',
'session_mode' => 'setSessionMode',
'sandbox_type' => 'setSandboxType'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'publisher_id' => 'getPublisherId',
'offer_id' => 'getOfferId',
'name' => 'getName',
'saas_subscription_status' => 'getSaasSubscriptionStatus',
'beneficiary' => 'getBeneficiary',
'purchaser' => 'getPurchaser',
'plan_id' => 'getPlanId',
'quantity' => 'getQuantity',
'term' => 'getTerm',
'is_test' => 'getIsTest',
'is_free_trial' => 'getIsFreeTrial',
'allowed_customer_operations' => 'getAllowedCustomerOperations',
'session_id' => 'getSessionId',
'fulfillment_id' => 'getFulfillmentId',
'store_front' => 'getStoreFront',
'session_mode' => 'getSessionMode',
'sandbox_type' => 'getSandboxType'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SAAS_SUBSCRIPTION_STATUS_NOT_STARTED = 'NotStarted';
const SAAS_SUBSCRIPTION_STATUS_PENDING_FULFILLMENT_START = 'PendingFulfillmentStart';
const SAAS_SUBSCRIPTION_STATUS_SUBSCRIBED = 'Subscribed';
const SAAS_SUBSCRIPTION_STATUS_SUSPENDED = 'Suspended';
const SAAS_SUBSCRIPTION_STATUS_UNSUBSCRIBED = 'Unsubscribed';
const ALLOWED_CUSTOMER_OPERATIONS_READ = 'Read';
const ALLOWED_CUSTOMER_OPERATIONS_UPDATE = 'Update';
const ALLOWED_CUSTOMER_OPERATIONS_DELETE = 'Delete';
const SESSION_MODE_NONE = 'None';
const SESSION_MODE_DRY_RUN = 'DryRun';
const SANDBOX_TYPE_NONE = 'None';
const SANDBOX_TYPE_CSP = 'Csp';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSaasSubscriptionStatusAllowableValues()
    {
        return [
            self::SAAS_SUBSCRIPTION_STATUS_NOT_STARTED,
self::SAAS_SUBSCRIPTION_STATUS_PENDING_FULFILLMENT_START,
self::SAAS_SUBSCRIPTION_STATUS_SUBSCRIBED,
self::SAAS_SUBSCRIPTION_STATUS_SUSPENDED,
self::SAAS_SUBSCRIPTION_STATUS_UNSUBSCRIBED,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAllowedCustomerOperationsAllowableValues()
    {
        return [
            self::ALLOWED_CUSTOMER_OPERATIONS_READ,
self::ALLOWED_CUSTOMER_OPERATIONS_UPDATE,
self::ALLOWED_CUSTOMER_OPERATIONS_DELETE,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSessionModeAllowableValues()
    {
        return [
            self::SESSION_MODE_NONE,
self::SESSION_MODE_DRY_RUN,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSandboxTypeAllowableValues()
    {
        return [
            self::SANDBOX_TYPE_NONE,
self::SANDBOX_TYPE_CSP,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['publisher_id'] = isset($data['publisher_id']) ? $data['publisher_id'] : null;
        $this->container['offer_id'] = isset($data['offer_id']) ? $data['offer_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['saas_subscription_status'] = isset($data['saas_subscription_status']) ? $data['saas_subscription_status'] : null;
        $this->container['beneficiary'] = isset($data['beneficiary']) ? $data['beneficiary'] : null;
        $this->container['purchaser'] = isset($data['purchaser']) ? $data['purchaser'] : null;
        $this->container['plan_id'] = isset($data['plan_id']) ? $data['plan_id'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['term'] = isset($data['term']) ? $data['term'] : null;
        $this->container['is_test'] = isset($data['is_test']) ? $data['is_test'] : null;
        $this->container['is_free_trial'] = isset($data['is_free_trial']) ? $data['is_free_trial'] : null;
        $this->container['allowed_customer_operations'] = isset($data['allowed_customer_operations']) ? $data['allowed_customer_operations'] : null;
        $this->container['session_id'] = isset($data['session_id']) ? $data['session_id'] : null;
        $this->container['fulfillment_id'] = isset($data['fulfillment_id']) ? $data['fulfillment_id'] : null;
        $this->container['store_front'] = isset($data['store_front']) ? $data['store_front'] : null;
        $this->container['session_mode'] = isset($data['session_mode']) ? $data['session_mode'] : null;
        $this->container['sandbox_type'] = isset($data['sandbox_type']) ? $data['sandbox_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSaasSubscriptionStatusAllowableValues();
        if (!is_null($this->container['saas_subscription_status']) && !in_array($this->container['saas_subscription_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'saas_subscription_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSessionModeAllowableValues();
        if (!is_null($this->container['session_mode']) && !in_array($this->container['session_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'session_mode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSandboxTypeAllowableValues();
        if (!is_null($this->container['sandbox_type']) && !in_array($this->container['sandbox_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'sandbox_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets publisher_id
     *
     * @return string
     */
    public function getPublisherId()
    {
        return $this->container['publisher_id'];
    }

    /**
     * Sets publisher_id
     *
     * @param string $publisher_id publisher_id
     *
     * @return $this
     */
    public function setPublisherId($publisher_id)
    {
        $this->container['publisher_id'] = $publisher_id;

        return $this;
    }

    /**
     * Gets offer_id
     *
     * @return string
     */
    public function getOfferId()
    {
        return $this->container['offer_id'];
    }

    /**
     * Sets offer_id
     *
     * @param string $offer_id offer_id
     *
     * @return $this
     */
    public function setOfferId($offer_id)
    {
        $this->container['offer_id'] = $offer_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets saas_subscription_status
     *
     * @return string
     */
    public function getSaasSubscriptionStatus()
    {
        return $this->container['saas_subscription_status'];
    }

    /**
     * Sets saas_subscription_status
     *
     * @param string $saas_subscription_status Indicates the status of the operation.
     *
     * @return $this
     */
    public function setSaasSubscriptionStatus($saas_subscription_status)
    {
        $allowedValues = $this->getSaasSubscriptionStatusAllowableValues();
        if (!is_null($saas_subscription_status) && !in_array($saas_subscription_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'saas_subscription_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['saas_subscription_status'] = $saas_subscription_status;

        return $this;
    }

    /**
     * Gets beneficiary
     *
     * @return \Swagger\Client\azure.marketplace\AadIdentifier
     */
    public function getBeneficiary()
    {
        return $this->container['beneficiary'];
    }

    /**
     * Sets beneficiary
     *
     * @param \Swagger\Client\azure.marketplace\AadIdentifier $beneficiary beneficiary
     *
     * @return $this
     */
    public function setBeneficiary($beneficiary)
    {
        $this->container['beneficiary'] = $beneficiary;

        return $this;
    }

    /**
     * Gets purchaser
     *
     * @return \Swagger\Client\azure.marketplace\AadIdentifier
     */
    public function getPurchaser()
    {
        return $this->container['purchaser'];
    }

    /**
     * Sets purchaser
     *
     * @param \Swagger\Client\azure.marketplace\AadIdentifier $purchaser purchaser
     *
     * @return $this
     */
    public function setPurchaser($purchaser)
    {
        $this->container['purchaser'] = $purchaser;

        return $this;
    }

    /**
     * Gets plan_id
     *
     * @return string
     */
    public function getPlanId()
    {
        return $this->container['plan_id'];
    }

    /**
     * Sets plan_id
     *
     * @param string $plan_id plan_id
     *
     * @return $this
     */
    public function setPlanId($plan_id)
    {
        $this->container['plan_id'] = $plan_id;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets term
     *
     * @return \Swagger\Client\azure.marketplace\SubscriptionTerm
     */
    public function getTerm()
    {
        return $this->container['term'];
    }

    /**
     * Sets term
     *
     * @param \Swagger\Client\azure.marketplace\SubscriptionTerm $term term
     *
     * @return $this
     */
    public function setTerm($term)
    {
        $this->container['term'] = $term;

        return $this;
    }

    /**
     * Gets is_test
     *
     * @return bool
     */
    public function getIsTest()
    {
        return $this->container['is_test'];
    }

    /**
     * Sets is_test
     *
     * @param bool $is_test Indicating whether the current subscription is a test asset.
     *
     * @return $this
     */
    public function setIsTest($is_test)
    {
        $this->container['is_test'] = $is_test;

        return $this;
    }

    /**
     * Gets is_free_trial
     *
     * @return bool
     */
    public function getIsFreeTrial()
    {
        return $this->container['is_free_trial'];
    }

    /**
     * Sets is_free_trial
     *
     * @param bool $is_free_trial true - the customer subscription is currently in free trial, false - the customer subscription is not currently in free trial.(optional field - default false)
     *
     * @return $this
     */
    public function setIsFreeTrial($is_free_trial)
    {
        $this->container['is_free_trial'] = $is_free_trial;

        return $this;
    }

    /**
     * Gets allowed_customer_operations
     *
     * @return string[]
     */
    public function getAllowedCustomerOperations()
    {
        return $this->container['allowed_customer_operations'];
    }

    /**
     * Sets allowed_customer_operations
     *
     * @param string[] $allowed_customer_operations allowed_customer_operations
     *
     * @return $this
     */
    public function setAllowedCustomerOperations($allowed_customer_operations)
    {
        $allowedValues = $this->getAllowedCustomerOperationsAllowableValues();
        if (!is_null($allowed_customer_operations) && array_diff($allowed_customer_operations, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'allowed_customer_operations', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['allowed_customer_operations'] = $allowed_customer_operations;

        return $this;
    }

    /**
     * Gets session_id
     *
     * @return string
     */
    public function getSessionId()
    {
        return $this->container['session_id'];
    }

    /**
     * Sets session_id
     *
     * @param string $session_id session_id
     *
     * @return $this
     */
    public function setSessionId($session_id)
    {
        $this->container['session_id'] = $session_id;

        return $this;
    }

    /**
     * Gets fulfillment_id
     *
     * @return string
     */
    public function getFulfillmentId()
    {
        return $this->container['fulfillment_id'];
    }

    /**
     * Sets fulfillment_id
     *
     * @param string $fulfillment_id fulfillment_id
     *
     * @return $this
     */
    public function setFulfillmentId($fulfillment_id)
    {
        $this->container['fulfillment_id'] = $fulfillment_id;

        return $this;
    }

    /**
     * Gets store_front
     *
     * @return string
     */
    public function getStoreFront()
    {
        return $this->container['store_front'];
    }

    /**
     * Sets store_front
     *
     * @param string $store_front store_front
     *
     * @return $this
     */
    public function setStoreFront($store_front)
    {
        $this->container['store_front'] = $store_front;

        return $this;
    }

    /**
     * Gets session_mode
     *
     * @return string
     */
    public function getSessionMode()
    {
        return $this->container['session_mode'];
    }

    /**
     * Sets session_mode
     *
     * @param string $session_mode Dry Run indicates all transactions run as Test-Mode in the commerce stack
     *
     * @return $this
     */
    public function setSessionMode($session_mode)
    {
        $allowedValues = $this->getSessionModeAllowableValues();
        if (!is_null($session_mode) && !in_array($session_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'session_mode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['session_mode'] = $session_mode;

        return $this;
    }

    /**
     * Gets sandbox_type
     *
     * @return string
     */
    public function getSandboxType()
    {
        return $this->container['sandbox_type'];
    }

    /**
     * Sets sandbox_type
     *
     * @param string $sandbox_type Possible Values are None, Csp (Csp sandbox purchase)
     *
     * @return $this
     */
    public function setSandboxType($sandbox_type)
    {
        $allowedValues = $this->getSandboxTypeAllowableValues();
        if (!is_null($sandbox_type) && !in_array($sandbox_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'sandbox_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sandbox_type'] = $sandbox_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
